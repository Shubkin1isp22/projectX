import telebot, threading, time, logging
from telebot import types, TeleBot
from datetime import datetime, date, timedelta
from datetime import time as dt_time
from abc import ABC, abstractmethod
from dotenv import load_dotenv
from database import get_events_from_db

logging.basicConfig(
    filename='bot_logs.log',  
    level=logging.INFO,  
    format='%(asctime)s - %(levelname)s - %(message)s'  # –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ –ª–æ–≥–æ–≤
)

load_dotenv()

DB_CONFIG = {
    "host": "localhost", 
    "port": "5432",  
    "user": "postgres",  
    "password": "Root1!?_",  
    "database": "tg_db"  
}

class BaseCommand(ABC):
    def __init__(self, bot : TeleBot):
        self.bot = bot

    
    def command(self):
        pass

class InfoCommand(BaseCommand):
    def command(self):
        @self.bot.message_handler(commands=['info'])
        def info_command(message):
            #print("–ö–æ–º–∞–Ω–¥–∞ info –ø–æ–ª—É—á–µ–Ω–∞")
            chat_id = message.chat.id
            info_str = """
                            –û –Ω–∞—Å

                            EventsBot ‚Äî —ç—Ç–æ –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ —Å–æ–±—ã—Ç–∏–π. –ú—ã —Å–æ–∑–¥–∞–ª–∏ —ç—Ç–æ–≥–æ –±–æ—Ç–∞, —á—Ç–æ–±—ã –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –≤—Å–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ –∏ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –Ω–∏—á–µ–≥–æ –≤–∞–∂–Ω–æ–≥–æ.

                            –° EventsBot –≤—ã –º–æ–∂–µ—Ç–µ:
                                ‚Ä¢	üìÖ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
                                ‚Ä¢	‚ûï –î–æ–±–∞–≤–ª—è—Ç—å —Å–≤–æ–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∏ –¥–µ–ª–∏—Ç—å—Å—è –∏–º–∏ —Å –¥—Ä—É–≥–∏–º–∏
                                ‚Ä¢	üîî –ü–æ–ª—É—á–∞—Ç—å —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –Ω—É–∂–Ω–æ–º –º–µ—Å—Ç–µ –≤ –Ω—É–∂–Ω–æ–µ –≤—Ä–µ–º—è

                            –ù–∞—à –±–æ—Ç —Å–æ–∑–¥–∞–Ω —Å –∑–∞–±–æ—Ç–æ–π –æ —Ç–µ—Ö, –∫—Ç–æ —Ü–µ–Ω–∏—Ç —Å–≤–æ—ë –≤—Ä–µ–º—è –∏ —Ö–æ—á–µ—Ç –±—ã—Ç—å —á–∞—Å—Ç—å—é –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞. –ù–µ–≤–∞–∂–Ω–æ, –æ—Ä–≥–∞–Ω–∏–∑—É–µ—Ç–µ –ª–∏ –≤—ã –º–∏—Ç–∞–ø, –ª–µ–∫—Ü–∏—é, –∫–æ–Ω—Ü–µ—Ä—Ç –∏–ª–∏ –æ–Ω–ª–∞–π–Ω-–≤—Å—Ç—Ä–µ—á—É ‚Äî EventsBot –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–∞–π—Ç–∏ —Å–≤–æ—é –∞—É–¥–∏—Ç–æ—Ä–∏—é.

                            –ú—ã –≤–µ—Ä–∏–º, —á—Ç–æ —Å–æ–±—ã—Ç–∏—è –æ–±—ä–µ–¥–∏–Ω—è—é—Ç –ª—é–¥–µ–π. –ê –º—ã –ø–æ–º–æ–≥–∞–µ–º —ç—Ç–∏–º –≤—Å—Ç—Ä–µ—á–∞–º –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å.

                            –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å ‚Äî —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ, —É–∑–Ω–∞–≤–∞–π—Ç–µ, –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ!
                            """
            self.bot.send_message(chat_id, info_str)
            logging.info(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {message.from_user.username}, chat_id: {message.chat.id}")
class MyLogCommand(BaseCommand):
    def command(self):
        @self.bot.message_handler(commands=['mylog'])
        def info_command(message):
            #print("–ö–æ–º–∞–Ω–¥–∞ mylog –ø–æ–ª—É—á–µ–Ω–∞")
            chat_id = message.chat.id
            log_str = """
                            –í—ã–≤–æ–¥
                            –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                            –æ
                            –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                            """
            self.bot.send_message(chat_id, log_str)
    #def first_or_second(self, use_base): #–∫—Ä—á, –µ—Å–ª–∏ –≤ use_base –ø–æ–¥–∞—Ç—å true, —Ç–æ –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—Å—è –æ –Ω–∞—Å, –∞ –µ—Å–ª–∏ false, —Ç–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ.
        #if use_base:
            #super().command()
        #else:
            #self.command()


class Event:
    """–ö–ª–∞—Å—Å, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"""
    

    def __init__(self, E_id, name_event, time, userName, datetimee,):
        self.event_id=E_id
        self.event_name=name_event
        self.event_time = time
        self.event_datetime = self.event_datetime = datetime.strptime(datetimee, "%Y-%m-%d %H:%M:%S") if isinstance(datetimee, str) else datetimee
        self.event_organizer=userName
        self.available = self.Status()
        
    def create_event_datetime(self):
        """–°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç datetime –∏–∑ event_date –∏ event_time"""
        event_time_obj = self.event_datetime.date()  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤ –æ–±—ä–µ–∫—Ç time
        return datetime.combine(self.event_date, event_time_obj)  # –û–±—ä–µ–¥–∏–Ω—è–µ–º date –∏ time –≤ datetime
        

    def Status(self):
        today = datetime.now()#–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è 
        return self.event_datetime > today # –ï—Å–ª–∏ –î–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª–∞, —Ç–æ –æ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ. –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –∫–∏–¥–∞–µ—Ç False/True. –ü–æ—Ç–æ–º —ç—Ç—É 
                                       # —Å—Ç—Ä–æ–∫—É –≤ –∞—Ä–≥—É–º–µ–Ω—Ç –±–µ—Ä—ë—Ç –Ω–∞ 14 —Å—Ç—Ä–æ–∫–µ –≤ —Å—Ç–∞—Ç—É—Å(False/True)
        
    def __str__(self):
        """–í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏"""
        status= "–î–æ—Å—Ç—É–ø–Ω–æ" if self.available else "–ó–∞–∫—Ä—ã—Ç–æ"
        return f"{self.event_name} | {self.event_time} | {self.event_organizer} | {self.event_datetime} ({status}) \n"
    def __repr__(self):
        # —Ä–∞–∑—Ä–∞–±–∞–º
        return f"Event({repr(self.event_name)}, {repr(self.event_time)}, {repr(self.event_organizer)}, {repr(self.event_datetime)})"
    
    @staticmethod
    def get_total_events():
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        from database import connect_db  # –ò–º–ø–æ—Ä—Ç –≤–Ω—É—Ç—Ä–∏ –º–µ—Ç–æ–¥–∞
        conn = connect_db()
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM events")
        result = cursor.fetchone()
        conn.close()
        return result[0]

class User:
    def __init__(self, message):
        self.tg_id = message.from_user.id
        self.tg_name = message.from_user.username 
        self.firstname = message.from_user.first_name
        
    def __str__(self):
        return f"–í—ã: {self.firstname}, –í–∞—à tg_id: {self.tg_id}, –í–∞—à username: {self.tg_name}"



class Notification:
    sent_notifications = set()  # –°—Ç–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ª–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

    def __init__(self, event:'Event'):
        self.event = event

        
    def stat(self):
        now_time = datetime.now() # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
        return now_time < self.event.event_datetime <= now_time + timedelta(minutes=60)
    
    def __str__(self):
        """–í—ã–≤–æ–¥ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        if self.stat():
            if self.event.event_name not in Notification.sent_notifications:
                Notification.sent_notifications.add(self.event.event_name)
                return f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {self.event.event_name} –Ω–∞—á–Ω—ë—Ç—Å—è –º–µ–Ω—å—à–µ —á–µ–º —á–µ—Ä–µ–∑ 1 —á–∞—Å"
        return ""


class My_base_error(Exception):
    pass

class Id_is_NaN(My_base_error):
    pass
class Time_is_time(My_base_error):
    pass
class Datetime_is_datetime(My_base_error):
    pass
class AddEvent:
    def __init__(self, bot, update_events_callback):
        self.bot = bot
        self.user_data = {} #–•—Ä–∞–Ω–∏—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.update_events_callback = update_events_callback
        

    def setup_hadlers(self, message):
        chat_id = message.chat.id
        self.user_data[chat_id] = {}
        self.bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ id –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
        self.bot.register_next_step_handler(message, self.process_id)

    def process_id(self, message):
        chat_id = message.chat.id
        id_is_nan = message.text
        try:
            if not id_is_nan.isdigit():
                raise Id_is_NaN("Id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–∏—Ñ—Ä–æ–π –∏–ª–∏ —á–∏—Å–ª–æ–º!!!")
            self.user_data[chat_id]['id'] = message.text
            self.bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
            self.bot.register_next_step_handler(message, self.process_name)
        except Id_is_NaN as e:
            self.bot.send_message(chat_id, f"–û—à–∏–±–∫–∞: {e}")
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ id –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.username}, chat_id: {message.chat.id}. –û—à–∏–±–∫–∞: {e}")

    def process_name(self, message):
        chat_id = message.chat.id
        self.user_data[chat_id]['name'] = message.text
        self.bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (HH:MM:SS):")
        self.bot.register_next_step_handler(message, self.process_time)

    def process_time(self, message):
        chat_id = message.chat.id
        pr_time_is_time = message.text.strip()

        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤–æ –≤—Ä–µ–º—è
            parsed_time = datetime.strptime(pr_time_is_time, "%H:%M:%S").time()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º, –µ—Å–ª–∏ –≤—Å—ë –æ–∫
            self.user_data[chat_id]['time'] = parsed_time
            self.bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–ì–ì–ì–ì-–ú–ú-–î–î) (HH:MM:SS):")
            self.bot.register_next_step_handler(message, self.process_date)

        except ValueError:
            # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É –≤—Ä–µ–º–µ–Ω–∏
            self.bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –í—Ä–µ–º—è –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM:SS, –Ω–∞–ø—Ä–∏–º–µ—Ä: 23:12:00")
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.username}, chat_id: {message.chat.id}. –í–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {pr_time_is_time}")
      


    def process_date(self, message):
        chat_id = message.chat.id
        date_is_datetime = message.text.strip()

        try:
            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å—Ç—Ä–æ–∫—É –≤ datetime
            parsed_datetime = datetime.strptime(date_is_datetime, "%Y-%m-%d %H:%M:%S")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.user_data[chat_id]['datetime'] = parsed_datetime

        except ValueError:  # –õ–æ–≤–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ—à–∏–±–∫—É ValueError
            self.bot.send_message(
                chat_id,
                "–û—à–∏–±–∫–∞: –î–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú:–°–°', –Ω–∞–ø—Ä–∏–º–µ—Ä: 2025-04-14 22:14:00"
            )
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –¥–∞—Ç—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.username}, chat_id: {message.chat.id}. –í–≤–µ–¥–µ–Ω–Ω–∞—è –¥–∞—Ç–∞: {date_is_datetime}")
        finally:
            self.bot.send_message(chat_id, "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ —É—á–∞—Å—Ç–∏–µ!")
            
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –ë–î
            user = message.from_user.username or "anon"
            from database import connect_db

            conn = connect_db()
            cursor = conn.cursor()
            cursor.execute(
                "INSERT INTO events VALUES (%s, %s, %s, %s, %s)",
                (
                    self.user_data[chat_id]['id'],
                    self.user_data[chat_id]['name'],
                    self.user_data[chat_id]['time'],
                    user,
                    self.user_data[chat_id]['datetime']
                )
            )
            conn.commit()
            conn.close()

            self.bot.send_message(chat_id, "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!")
            self.update_events_callback()
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {chat_id} –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ {self.user_data[chat_id]['name']}")
        except ValueError:
            self.bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞—Ç—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        except Exception as e:
            self.bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")
        


        self.user_data.pop(chat_id, None)




class EventBot:
    """–ö–ª–∞—Å—Å —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏"""
    def __init__(self):
        self.token = '8037825172:AAGi30A88smYPAnCVP2SOIORnRhVgn1xA0k'
        self.bot = telebot.TeleBot(self.token) 
        self.events = get_events_from_db()
        self.setup_handlers()
        self.add_event_handler = AddEvent(self.bot, self.refresh_events)
        self.about_us = InfoCommand(self.bot)

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫"""
        commands = [
            InfoCommand(self.bot),
            MyLogCommand(self.bot)
        ]
        for cmd in commands:
            cmd.command()

        @self.bot.message_handler(commands=['start', 'help'])
        def start_message(message):
            now = datetime.now().hour
            if 6 <= now < 12:
                day_period = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ"
            elif 12 <= now < 23:
                day_period = "–î–æ–±—Ä—ã–π –¥–µ–Ω—å"
            else:
                day_period = "–î–æ–±—Ä–æ–π –Ω–æ—á–∏"
            self.bot.send_message(message.chat.id, day_period)

            # –ó–∞–ø—É—Å–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            threading.Thread(target=self.send_notifications, args=(message.chat.id,), daemon=True).start()

        @self.bot.message_handler(commands=['button'])
        def button_message(message):
            #print("–ö–æ–º–∞–Ω–¥–∞ button –ø–æ–ª—É—á–µ–Ω–∞")
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
            item2 = types.KeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å")
            item3 = types.KeyboardButton("–°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
            item4 = types.KeyboardButton("–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—ã")
            markup.add(item1, item2, item3, item4)
            self.bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞–º –Ω–∞–¥–æ', reply_markup=markup)


        @self.bot.message_handler(commands=['all'])
        def all_message(message):
            #print("–ö–æ–º–∞–Ω–¥–∞ all –ø–æ–ª—É—á–µ–Ω–∞")
            total = Event.get_total_events()  # –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞
            self.bot.send_message(message.chat.id, f"–í—Å–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: {total}")
            logging.info(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.username}")


        @self.bot.message_handler(func=lambda message: True)
        def message_reply(message):
            if message.text == "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è":
                show_events = "\n".join(str(event) for event in self.events) if self.events else "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"

                self.bot.send_message(message.chat.id, show_events)
            elif message.text == "–ü—Ä–æ—Ñ–∏–ª—å":
                usr_obj = User(message)
                show_user = str(usr_obj)
                self.bot.send_message(message.chat.id, show_user)

            elif message.text == "–°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ":
                self.add_event_handler.setup_hadlers(message)


            elif message.text == "–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—ã":
                organizers = list(set(map(lambda e: e.event_organizer, self.events)))
                organizers_info = "\n".join(organizers)
                self.bot.send_message(message.chat.id, f"–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:\n{organizers_info}")
                            



    def send_notifications(self, chat_id):
        """–§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        sent_notifications = set()
        while True:
            for event in self.events:
                notif_obj = Notification(event)
                notif_text = str(notif_obj)
                if notif_text and event.event_name not in sent_notifications:
                    self.bot.send_message(chat_id, notif_text)
                    sent_notifications.add(event.event_name)
                    logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id} –æ —Å–æ–±—ã—Ç–∏–∏ {event.event_name}")
            time.sleep(60)

    def refresh_events(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        self.events = get_events_from_db()

    def run(self):
        """–ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        self.bot.infinity_polling()





if __name__ == "__main__":
    Tele = EventBot()
    Tele.run()